<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Source</name>
    </assembly>
    <members>
        <member name="T:Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
            <nuget id="netfx-Guard" />
        </member>
        <member name="M:Guard.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Guard.NotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is null or an empty string.</exception>
        </member>
        <member name="M:Guard.IsValid``1(System.Linq.Expressions.Expression{System.Func{``0}},``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is valid according 
            to the <paramref name="validate"/> function. Throws <see cref="T:System.ArgumentNullException"/> 
            otherwise.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is not valid according 
            to the <paramref name="validate"/> function.</exception>
        </member>
        <member name="M:Guard.IsValid``1(System.Linq.Expressions.Expression{System.Func{``0}},``0,System.Func{``0,System.Boolean},System.String,System.Object[])">
            <summary>
            Ensures the given string <paramref name="value"/> is valid according 
            to the <paramref name="validate"/> function. Throws <see cref="T:System.ArgumentNullException"/> 
            otherwise.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is not valid according 
            to the <paramref name="validate"/> function.</exception>
        </member>
        <member name="T:System.Maybe`1">
            <summary>
            An implementation of the Maybe monad.
            </summary>
            <nuget id="netfx-System.Maybe" />
        </member>
        <member name="M:System.Maybe`1.From(`0)">
            <summary>
            Factory method that creates a <see cref="T:System.Maybe`1"/>
            that wraps the given T value.  If that value is null, 
            then <see cref="P:System.Maybe`1.Empty"/> is returned.
            </summary>
            <param name="value">The value to wrap in a <see cref="T:System.Maybe`1"/>.  
            This value may be null.</param>
            <returns>A <see cref="T:System.Maybe`1"/> wrapping the given value.</returns>
        </member>
        <member name="M:System.Maybe`1.#ctor">
            <summary>
            Constructor for the Empty value.
            </summary>
        </member>
        <member name="M:System.Maybe`1.#ctor(`0)">
            <summary>
            Constructor for non-Empty values.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:System.Maybe`1.GetValueOrDefault(`0)">
            <summary>
            Returns the <typeparamref name="T"/> value underlying this <see cref="T:System.Maybe`1"/>
            if there is one; otherise, returns the specified default value for T.
            </summary>
            <param name="default">The default value to return if the current <see cref="T:System.Maybe`1"/>
            is Empty.</param>
            <returns> The <typeparamref name="T"/> value underlying this <see cref="T:System.Maybe`1"/>
            if there is one; otherise, returns the specified default T value.</returns>
        </member>
        <member name="M:System.Maybe`1.GetValueOrDefault">
            <summary>
            Returns the <typeparamref name="T"/> value underlying this <see cref="T:System.Maybe`1"/>
            if there is one; otherise, returns default(T).
            </summary>
            <returns> The <typeparamref name="T"/> value underlying this <see cref="T:System.Maybe`1"/>
            if there is one; otherise, returns default(T).</returns>
        </member>
        <member name="M:System.Maybe`1.Bind``1(System.Func{`0,System.Maybe{``0}})">
            <summary>
            If Empty, returns <see cref="P:System.Maybe`1.Empty"/>;
            otherwise, projects the current underlying value from 
            <typeparamref name="T"/> to <typeparamref name="U"/>
            using the given projection and returns that value
            wrapped in a <see cref="T:System.Maybe`1"/>.
            </summary>
            <typeparam name="U">The output type.</typeparam>
            <param name="projection">The projection to use
            to create a <see cref="T:System.Maybe`1"/> from the value of the current <see cref="T:System.Maybe`1"/>.
            </param>
            <returns>The value T projected onto <see cref="T:System.Maybe`1"/>.</returns>
        </member>
        <member name="M:System.Maybe`1.Map``1(System.Func{`0,``0})">
            <summary>
            Maps a <see cref="T:System.Maybe`1"/> to a <see cref="T:System.Maybe`1"/>.
            </summary>
            <typeparam name="U">The type to project the underlying value to.</typeparam>
            <param name="project">The projection to use.</param>
            <returns>A <see cref="T:System.Maybe`1"/>.</returns>
        </member>
        <member name="M:System.Maybe`1.As``1">
            <summary>
            Creates a <see cref="T:System.Maybe`1"/> from
            the underlying value of the current <see cref="T:System.Maybe`1"/>,
            if it is not Empty.  If the current <see cref="T:System.Maybe`1"/>
            is Empty, returns <see cref="P:System.Maybe`1.Empty"/>.
            </summary>
            <typeparam name="U">The underlying type of the resultant Maybe.</typeparam>
            <returns>A <see cref="T:System.Maybe`1"/></returns>
        </member>
        <member name="M:System.Maybe`1.Equals(System.Object)">
            <summary>
            Determines whether the given System.Object is equivalent to the current
            <see cref="T:System.Maybe`1"/>.
            </summary>
            <param name="obj">The object against which to compare the current <see cref="T:System.Maybe`1"/>.</param>
            <returns>True if the object is equivalent to the current <see cref="T:System.Maybe`1"/>; false othewise.</returns>
        </member>
        <member name="M:System.Maybe`1.GetHashCode">
            <summary>
            Returns the hash code (for use in a dictionary or hash map) of the current <see cref="T:System.Maybe`1"/>.
            </summary>
            <returns>The hash code of the current <see cref="T:System.Maybe`1"/>.</returns>
        </member>
        <member name="M:System.Maybe`1.Equals(System.Maybe{`0})">
            <summary>
            Compares the current <see cref="T:System.Maybe`1"/> to another <see cref="T:System.Maybe`1"/>, returning true if they are equivalent,
            or false otherwise.
            <see cref="T:System.Maybe`1"/> objects are equivalent if and only if both instances are <see cref="P:System.Maybe`1.Empty"/> or
            both instances' underlying values are equivalent.
            </summary>
            <param name="other">The other <see cref="T:System.Maybe`1"/> to compare against this instance.</param>
            <returns>True if the object are equivalent; false otherwise.</returns>
        </member>
        <member name="P:System.Maybe`1.Empty">
            <summary>
            The empty value.
            </summary>
        </member>
        <member name="P:System.Maybe`1.HasValue">
            <summary>
            Indicates whether or not the current instance has an underlying value.
            Returns true if there is an underlying value, or false if there is not.
            HasValue returns false if and only if the current instance is equal to
            <see cref="P:System.Maybe`1.Empty"/>.
            </summary>
        </member>
        <member name="T:System.Maybe">
            <summary>
            Static class that contains a convenience factory method for 
            <see cref="T:System.Maybe`1"/>,.
            </summary>
        </member>
        <member name="M:System.Maybe.From``1(``0)">
            <summary>
            Convenience factory method that provides type inference.
            Constructs a <see cref="T:System.Maybe`1"/>.
            </summary>
            <typeparam name="T">The type of Maybe to construct.</typeparam>
            <param name="value">The value to use as the underlying value for the constructed <see cref="T:System.Maybe`1"/>.</param>
            <returns>A <see cref="T:System.Maybe`1"/> from the given value.</returns>
        </member>
        <member name="M:System.Maybe.From``1(System.Nullable{``0})">
            <summary>
            Factory method that creates a <see cref="T:System.Maybe`1"/> from
            a <see cref="T:System.Nullable`1"/>.  If the nullable has no value, then <see cref="P:System.Maybe`1.Empty"/>
            is returned.
            </summary>
            <param name="value">The value to project to a <see cref="T:System.Maybe`1"/>.  This value may be null.</param>
            <returns>A <see cref="T:System.Maybe`1"/>.</returns>
        </member>
        <member name="M:System.MaybeExtensions.Select``2(System.Maybe{``0},System.Func{``0,``1})">
            <summary>
            Provides support for query comprehension syntax of the following form:
            var value =	
            	from x in [Maybe{X}]
            	select x.ToString();
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:System.Maybe`1"/>.</typeparam>
            <typeparam name="U">The underlying type of the <see cref="T:System.Maybe`1"/> that results 
            from the projection <paramref name="project"/>.</typeparam>
            <param name="this" this="true">The current Maybe.</param>
            <param name="project">The projection that will be used to create a <typeparamref name="U"/> from
            the value <typeparamref name="T"/> that underlies the current Maybe instance.
            If the current <see cref="T:System.Maybe`1"/> is Empty, then <see cref="P:System.Maybe`1.Empty"/>
            is returned instead.</param>
            <returns>If the current <see cref="T:System.Maybe`1"/> is not Empty, returns the T value this instance wraps
            projected onto U using the specified projection; returns <see cref="P:System.Maybe`1.Empty"/>" otherwise.
            </returns>
        </member>
        <member name="M:System.MaybeExtensions.SelectMany``3(System.Maybe{``0},System.Func{``0,System.Maybe{``1}},System.Func{``0,``1,``2})">
            <summary>
            Provides support for query comprehension syntax of the following form:
            var value =	
            	from x in [Maybe{X}]
            	from y in [Maybe{Y}]
            	select x.ToString() + y.ToString();
            </summary>
            <typeparam name="T">The type of the current Maybe.</typeparam>
            <typeparam name="U">The type of the Maybe that results from the projection <paramref name="project"/>.</typeparam>
            <typeparam name="V">The type of Maybe that results from the combination of the <see cref="T:System.Maybe`1"/> and the
            projected <see cref="T:System.Maybe`1"/>.</typeparam>
            <param name="this" this="true">The current Maybe.</param>
            <param name="project">The projection that will be used to create a <see cref="T:System.Maybe`1"/> from
            the current <see cref="T:System.Maybe`1"/>.</param>
            <param name="combine">The function that logically "combines" the <see cref="T:System.Maybe`1"/> and
            the projected <see cref="T:System.Maybe`1"/>.
            </param>
            <returns>The combination of the <paramref name="combine"/> function,
            or <see cref="P:System.Maybe`1.Empty"/> if either of the current <see cref="T:System.Maybe`1"/>
            and the projected <see cref="T:System.Maybe`1"/> is Empty.
            </returns>
        </member>
        <member name="M:System.MaybeExtensions.Coalesce``1(System.Maybe{``0},System.Maybe{``0})">
            <summary>
            Returns the current <see cref="T:System.Maybe`1"/> if it is not Empty; otherwise,
            returns <paramref name="other"/>.
            </summary>
            <param name="this" this="true">The current <see cref="T:System.Maybe`1"/>.</param>
            <param name="other">The <see cref="T:System.Maybe`1"/> to return if the current
            <see cref="T:System.Maybe`1"/> is Empty.</param>
            <returns>The current <see cref="T:System.Maybe`1"/> if it is not Empty; otherwise,
            returns <paramref name="other"/>.</returns>
        </member>
    </members>
</doc>
