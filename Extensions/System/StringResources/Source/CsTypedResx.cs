// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NetFx
{
    using System.Collections.Generic;
    using System.IO;
    using System;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml.Linq;
    using System.Text.RegularExpressions;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CsTypedResx : CsTypedResxBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Globalization;

namespace ");
            
            #line 25 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{");
            
            #line 26 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

RenderArea(RootArea, MakePublic ? "public" : "internal");

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 30 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

private void RenderMessageHint(string value)
{
	value = new System.Xml.Linq.XText(value).ToString();
	foreach (var line in value.Split(new [] { '\n' }, StringSplitOptions.None))
    {
	    PushIndent("\t");

        
        #line default
        #line hidden
        
        #line 37 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("/// ");

        
        #line default
        #line hidden
        
        #line 38 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(line));

        
        #line default
        #line hidden
        
        #line 38 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 39 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

        PopIndent();
    }
}

private void RenderArea(ResourceArea area, string visibility)
{
    PushIndent("\t");


        
        #line default
        #line hidden
        
        #line 48 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\r\n/// <summary>\r\n/// Provides access to string resources.\r\n/// </summary>\r\n[globa" +
        "l::System.CodeDom.Compiler.GeneratedCodeAttribute(\"TypedResx\", \"1.0.0.0\")]\r\n[glo" +
        "bal::System.Diagnostics.DebuggerNonUserCodeAttribute()]\r\n");

        
        #line default
        #line hidden
        
        #line 55 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(visibility));

        
        #line default
        #line hidden
        
        #line 55 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(" static partial class ");

        
        #line default
        #line hidden
        
        #line 55 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(area.Name));

        
        #line default
        #line hidden
        
        #line 55 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\r\n{");

        
        #line default
        #line hidden
        
        #line 56 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

	foreach (var value in area.Values)
	{
		if (!value.HasFormat)
		{

        
        #line default
        #line hidden
        
        #line 61 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\r\n\t/// <summary>\r\n\t/// Looks up a localized string similar to: \r\n");

        
        #line default
        #line hidden
        
        #line 65 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
 RenderMessageHint(value.Value); 
        
        #line default
        #line hidden
        
        #line 65 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\t/// </summary>\r\n\tpublic static string ");

        
        #line default
        #line hidden
        
        #line 67 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));

        
        #line default
        #line hidden
        
        #line 67 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(" { get { return ");

        
        #line default
        #line hidden
        
        #line 67 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ResourcesTypeName));

        
        #line default
        #line hidden
        
        #line 67 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 67 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(area.Prefix));

        
        #line default
        #line hidden
        
        #line 67 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));

        
        #line default
        #line hidden
        
        #line 67 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("; } }\r\n");

        
        #line default
        #line hidden
        
        #line 68 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

		}
        else if (value.IsIndexed)
        {

        
        #line default
        #line hidden
        
        #line 72 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\r\n\t/// <summary>\r\n\t/// Looks up a localized string similar to: \r\n");

        
        #line default
        #line hidden
        
        #line 76 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
 RenderMessageHint(value.Value); 
        
        #line default
        #line hidden
        
        #line 76 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\t/// </summary>\r\n\tpublic static string ");

        
        #line default
        #line hidden
        
        #line 78 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));

        
        #line default
        #line hidden
        
        #line 78 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 78 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", value.Format.Select((s, i) => "object arg" + i))));

        
        #line default
        #line hidden
        
        #line 78 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(")\r\n\t{\r\n        var args = new [] { ");

        
        #line default
        #line hidden
        
        #line 80 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", value.Format.Select((s, i) => "arg" + i))));

        
        #line default
        #line hidden
        
        #line 80 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(" };\r\n        return string.Format(System.Globalization.CultureInfo.CurrentCulture" +
        ", ");

        
        #line default
        #line hidden
        
        #line 81 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ResourcesTypeName));

        
        #line default
        #line hidden
        
        #line 81 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 81 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(area.Prefix));

        
        #line default
        #line hidden
        
        #line 81 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));

        
        #line default
        #line hidden
        
        #line 81 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(", args);\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 83 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

        }
		else
		{

        
        #line default
        #line hidden
        
        #line 87 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\r\n\t/// <summary>\r\n\t/// Looks up a localized string similar to: \r\n");

        
        #line default
        #line hidden
        
        #line 91 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
 RenderMessageHint(value.Value); 
        
        #line default
        #line hidden
        
        #line 91 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\t/// </summary>\r\n\tpublic static string ");

        
        #line default
        #line hidden
        
        #line 93 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));

        
        #line default
        #line hidden
        
        #line 93 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 93 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", value.Format.Select(s => "object " + s))));

        
        #line default
        #line hidden
        
        #line 93 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(")\r\n\t{\r\n\t\t// NOTE: if you use named format strings, you need to manually install t" +
        "he package netfx-System.StringFormatWith\r\n\t\treturn ");

        
        #line default
        #line hidden
        
        #line 96 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ResourcesTypeName));

        
        #line default
        #line hidden
        
        #line 96 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 96 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(area.Prefix));

        
        #line default
        #line hidden
        
        #line 96 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));

        
        #line default
        #line hidden
        
        #line 96 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(".FormatWith(new \r\n\t\t{\r\n");

        
        #line default
        #line hidden
        
        #line 98 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

for (int i = 0; i < value.Format.Count; i++)
{

        
        #line default
        #line hidden
        
        #line 101 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\t\t\t");

        
        #line default
        #line hidden
        
        #line 102 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.Format[i]));

        
        #line default
        #line hidden
        
        #line 102 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 102 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(value.Format[i]));

        
        #line default
        #line hidden
        
        #line 102 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write(",\r\n");

        
        #line default
        #line hidden
        
        #line 103 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

}

        
        #line default
        #line hidden
        
        #line 105 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("\t\t});\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 108 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

		}
	}

	foreach (var nestedArea in area.NestedAreas)
	{
		RenderArea(nestedArea, "public");
	}

        
        #line default
        #line hidden
        
        #line 116 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 118 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

	PopIndent();
}

        
        #line default
        #line hidden
        
        #line 1 "C:\Code\Personal\Extensions\Extensions\System\StringResources\Source\CsTypedResx.tt"

private bool _MakePublicField;

/// <summary>
/// Access the MakePublic parameter of the template.
/// </summary>
private bool MakePublic
{
    get
    {
        return this._MakePublicField;
    }
}

private string _ResourcesTypeNameField;

/// <summary>
/// Access the ResourcesTypeName parameter of the template.
/// </summary>
private string ResourcesTypeName
{
    get
    {
        return this._ResourcesTypeNameField;
    }
}

private string _TargetNamespaceField;

/// <summary>
/// Access the TargetNamespace parameter of the template.
/// </summary>
private string TargetNamespace
{
    get
    {
        return this._TargetNamespaceField;
    }
}

private string _TargetClassNameField;

/// <summary>
/// Access the TargetClassName parameter of the template.
/// </summary>
private string TargetClassName
{
    get
    {
        return this._TargetClassNameField;
    }
}

private global::NetFx.ResourceArea _RootAreaField;

/// <summary>
/// Access the RootArea parameter of the template.
/// </summary>
private global::NetFx.ResourceArea RootArea
{
    get
    {
        return this._RootAreaField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool MakePublicValueAcquired = false;
if (this.Session.ContainsKey("MakePublic"))
{
    this._MakePublicField = ((bool)(this.Session["MakePublic"]));
    MakePublicValueAcquired = true;
}
if ((MakePublicValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("MakePublic");
    if ((data != null))
    {
        this._MakePublicField = ((bool)(data));
    }
}
bool ResourcesTypeNameValueAcquired = false;
if (this.Session.ContainsKey("ResourcesTypeName"))
{
    this._ResourcesTypeNameField = ((string)(this.Session["ResourcesTypeName"]));
    ResourcesTypeNameValueAcquired = true;
}
if ((ResourcesTypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ResourcesTypeName");
    if ((data != null))
    {
        this._ResourcesTypeNameField = ((string)(data));
    }
}
bool TargetNamespaceValueAcquired = false;
if (this.Session.ContainsKey("TargetNamespace"))
{
    this._TargetNamespaceField = ((string)(this.Session["TargetNamespace"]));
    TargetNamespaceValueAcquired = true;
}
if ((TargetNamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TargetNamespace");
    if ((data != null))
    {
        this._TargetNamespaceField = ((string)(data));
    }
}
bool TargetClassNameValueAcquired = false;
if (this.Session.ContainsKey("TargetClassName"))
{
    this._TargetClassNameField = ((string)(this.Session["TargetClassName"]));
    TargetClassNameValueAcquired = true;
}
if ((TargetClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TargetClassName");
    if ((data != null))
    {
        this._TargetClassNameField = ((string)(data));
    }
}
bool RootAreaValueAcquired = false;
if (this.Session.ContainsKey("RootArea"))
{
    this._RootAreaField = ((global::NetFx.ResourceArea)(this.Session["RootArea"]));
    RootAreaValueAcquired = true;
}
if ((RootAreaValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("RootArea");
    if ((data != null))
    {
        this._RootAreaField = ((global::NetFx.ResourceArea)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CsTypedResxBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
